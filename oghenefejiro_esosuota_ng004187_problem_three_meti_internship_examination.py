# -*- coding: utf-8 -*-
"""OGHENEFEJIRO ESOSUOTA - NG004187 - PROBLEM THREE - METI INTERNSHIP EXAMINATION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MafKpXCoH5MkQcLq5Z0jsTKjGldEH4je
"""

# Step 1: Install dependencies (if needed)
# !pip install torch torchvision matplotlib

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
import random

class DigitCNN(nn.Module):
    def __init__(self):
        super(DigitCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, 3, 1)
        self.conv2 = nn.Conv2d(32, 64, 3, 1)
        self.dropout1 = nn.Dropout(0.25)
        self.fc1 = nn.Linear(9216, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))    # [28x28] -> [26x26]
        x = F.relu(self.conv2(x))    # [26x26] -> [24x24]
        x = F.max_pool2d(x, 2)       # [24x24] -> [12x12]
        x = self.dropout1(x)
        x = torch.flatten(x, 1)      # [12x12x64] -> [9216]
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.1307,), (0.3081,))
])

train_dataset = datasets.MNIST(root='./data', train=True, transform=transform, download=True)
test_dataset = datasets.MNIST(root='./data', train=False, transform=transform)

train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=1000)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = DigitCNN().to(device)
optimizer = optim.Adam(model.parameters(), lr=0.001)
criterion = nn.CrossEntropyLoss()

def train(model, loader, optimizer, criterion, epochs=5):
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for data, target in loader:
            data, target = data.to(device), target.to(device)
            optimizer.zero_grad()
            output = model(data)
            loss = criterion(output, target)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        print(f"Epoch {epoch+1}, Loss: {total_loss/len(loader):.4f}")

train(model, train_loader, optimizer, criterion)

torch.save(model.state_dict(), 'digit_cnn.pth')